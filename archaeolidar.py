# -*- coding: utf-8 -*-
"""
/***************************************************************************
 archaeolidar
                                 A QGIS plugin
 This plugin provides several basic algorithms for processing LiDAR derived rasters.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Enrique Cerrillo Cuenca / Universidad Complutense
        email                : enriqcer@ucm.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QCheckBox
from qgis.core import QgsProject,QgsRasterLayer
from scipy.ndimage import gaussian_laplace,gaussian_filter
from osgeo import gdal,osr,ogr
from qgis.utils import iface
import numpy as np


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .archaeolidar_dialog import archaeolidarDialog
import os.path


class archaeolidar:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'archaeolidar_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ArchaeoLiDAR')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('archaeolidar', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/archaeolidar/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ArchaeoLiDAR'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ArchaeoLiDAR'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.tif')
        self.dlg.lineEdit.setText(filename)

    def save_raster(self,geotransform,epsg,cols,rows,img,output_file,descrip):
 
            # Create gtif file with rows and columns from parent raster 
            driver = gdal.GetDriverByName("GTiff")
 
            dst_ds = driver.Create(output_file, 
                       cols, 
                       rows, 
                       1, 
                       gdal.GDT_Float64)
 
            ##writting output raster
            dst_ds.GetRasterBand(1).WriteArray(img)
  
            #setting extension of output raster
            # top left x, w-e pixel resolution, rotation, top left y, rotation, n-s pixel resolution
            dst_ds.SetGeoTransform(geotransform)
  
            # setting spatial reference of output raster 
           
            srs = osr.SpatialReference()
            srs.ImportFromEPSG(epsg)
            dst_ds.SetProjection( srs.ExportToWkt() )
  
            #Close output raster dataset 
            dst_ds = None

            #Loading new raster
            if descrip != "no":
                iface.addRasterLayer(output_file, descrip)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = archaeolidarDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        # Fetch the currently loaded layers
        layers_act = QgsProject.instance().layerTreeRoot().children()
        layers = [] 
        for a in layers_act:
            if 'gdal' in str(a.layer()):
                layers.append(a)
            

        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        self.dlg.show()
        result = self.dlg.exec_()

        if result:
            output_tmp = self.dlg.lineEdit.text()
            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[selectedLayerIndex].layer()
            provider = selectedLayer.dataProvider()
            extent = provider.extent()
            rows= a.layer().height()
            cols= a.layer().width()
            epsg = a.layer().crs().postgisSrid()

            xmin = extent.xMinimum()
            ymax = extent.yMaximum()
            xsize = a.layer().rasterUnitsPerPixelX()
            ysize = a.layer().rasterUnitsPerPixelY()
            geotransform = [xmin, xsize, 0, ymax, 0, -ysize]

            ds = gdal.Open(provider.dataSourceUri())
            raster = ds.GetRasterBand(1).ReadAsArray()
            
            if self.dlg.cb_cal_log.isChecked():
                #Fetch slider value
                sigma=self.dlg.doubleSpinBox.value()
                img = gaussian_laplace(raster,sigma)
                output_file=output_tmp[:-4]+"_LOG"+output_tmp[-4:]
                descrip="LoG sigma "+str(sigma)
                self.save_raster(geotransform,epsg,cols,rows,img,output_file,descrip)

            if self.dlg.cb_cal_lrm.isChecked():
                #Fetch slider value
                sigma=self.dlg.dsb_sigma_lrm.value()
                tmp1 = gaussian_filter(raster,sigma)
                img = raster - tmp1
                output_file=output_tmp[:-4]+"_LRM"+output_tmp[-4:]
                descrip="LRM sigma "+str(sigma)
                self.save_raster(geotransform,epsg,cols,rows,img,output_file,descrip)
            

            if self.dlg.cb_cal_cl.isChecked():
                #Fetch slider value
                sigma=self.dlg.dsb_sigma_cl.value()
                contour_offset=self.dlg.dsb_cintv_cl.value()
                tmp1 = gaussian_filter(raster,sigma)
                output_file=output_tmp[:-4]+"_CL.shp"

                self.save_raster(geotransform,epsg,cols,rows,tmp1,".tmp.tif","no")

                ds = gdal.Open(".tmp.tif")
                img = ds.GetRasterBand(1)

                descrip="contours "+str(contour_offset)

                dest_srs = osr.SpatialReference()
                dest_srs.ImportFromEPSG(epsg)

                ogr_ds = ogr.GetDriverByName("ESRI Shapefile").CreateDataSource(output_file)
                contour_shp = ogr_ds.CreateLayer('contour', dest_srs)

                field_defn = ogr.FieldDefn("ID", ogr.OFTInteger)
                contour_shp.CreateField(field_defn)
                field_defn = ogr.FieldDefn("elev", ogr.OFTReal)
                contour_shp.CreateField(field_defn)

                gdal.ContourGenerate(img, contour_offset, 0, [], 0, 0, contour_shp, 0, 1)
                iface.addVectorLayer(output_file, "", "ogr")

            
